/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Playlist = {
  _id: string;
  _type: "playlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  select?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "startup";
  }>;
};

export type Startup = {
  _id: string;
  _type: "startup";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  views?: number;
  description?: string;
  category?: string;
  image?: string;
  pitch?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: number;
  name?: string;
  username?: string;
  email?: string;
  image?: string;
  bio?: string;
};

export type Markdown = string;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | Playlist | Startup | Slug | Author | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: STARTUPS_QUERY
// Query: *[_type == 'startup' && defined(slug.current) && !defined($search) || title match $search || category match $search || author->name match $search ] | order(_createdAt desc){  title,  _id,  _createdAt,  pitch,  slug,  image,  category,  views,  author -> {    _id, name, image, bio  },   description,  }
export type STARTUPS_QUERYResult = Array<{
  title: string | null;
  _id: string;
  _createdAt: string;
  pitch: null;
  slug: Slug | null;
  image: null;
  category: null;
  views: null;
  author: null;
  description: null;
} | {
  title: null;
  _id: string;
  _createdAt: string;
  pitch: null;
  slug: null;
  image: string | null;
  category: null;
  views: null;
  author: null;
  description: null;
} | {
  title: string | null;
  _id: string;
  _createdAt: string;
  pitch: null;
  slug: null;
  image: null;
  category: null;
  views: null;
  author: null;
  description: string | null;
} | {
  title: string | null;
  _id: string;
  _createdAt: string;
  pitch: string | null;
  slug: Slug | null;
  image: string | null;
  category: string | null;
  views: number | null;
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    bio: string | null;
  } | null;
  description: string | null;
}>;
// Variable: STARTUP_QUERY_BY_ID
// Query: *[_type == 'startup' && _id == $id][0] {  title,  _id,  _createdAt,  pitch,  slug,  image,  category,  views,  author -> {    _id, name, image, bio, username  },   description,    pitch,}
export type STARTUP_QUERY_BY_IDResult = {
  title: string | null;
  _id: string;
  _createdAt: string;
  pitch: string | null;
  slug: Slug | null;
  image: string | null;
  category: string | null;
  views: number | null;
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    bio: string | null;
    username: string | null;
  } | null;
  description: string | null;
} | null;
// Variable: STARTUP_VIEWS_QUERY_BY_ID
// Query: *[_type == 'startup' && _id == $id][0] {   _id,  views,}
export type STARTUP_VIEWS_QUERY_BY_IDResult = {
  _id: string;
  views: number | null;
} | null;
// Variable: ALL_STARTUPS_QUERY_BY_ID
// Query: *[_type == 'startup' && author._ref == $id] | order(_createdAt desc)  {    title,  _id,  _createdAt,  pitch,  slug,  image,  category,  views,  author -> {    _id, name, image, bio  },   description,  }
export type ALL_STARTUPS_QUERY_BY_IDResult = Array<{
  title: string | null;
  _id: string;
  _createdAt: string;
  pitch: string | null;
  slug: Slug | null;
  image: string | null;
  category: string | null;
  views: number | null;
  author: {
    _id: string;
    name: string | null;
    image: string | null;
    bio: string | null;
  } | null;
  description: string | null;
}>;
// Variable: AUTHOR_QUERY_BY_GITHUB_ID
// Query: *[_type == 'author' && id == $id][0] {   _id,  id,  name,  username,  email,  image,  bio,}
export type AUTHOR_QUERY_BY_GITHUB_IDResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  email: string | null;
  image: string | null;
  bio: string | null;
} | null;
// Variable: AUTHOR_QUERY_BY_ID
// Query: *[_type == 'author' && _id == $id][0] {   _id,  id,  name,  username,  email,  image,  bio,}
export type AUTHOR_QUERY_BY_IDResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  email: string | null;
  image: string | null;
  bio: string | null;
} | null;
// Variable: PLAYLIST_QUERY_BY_SLUG
// Query: *[_type == "playlist" && slug.current == $slug][0] {    _id,    title,    slug,    select[]->{      _id,      _createdAt,      title,      slug,      author->{        _id,        name,        slug,        image,        bio      },      views,      description,      category,      image,      pitch    }  }
export type PLAYLIST_QUERY_BY_SLUGResult = {
  _id: string;
  title: string | null;
  slug: Slug | null;
  select: Array<{
    _id: string;
    _createdAt: string;
    title: string | null;
    slug: Slug | null;
    author: {
      _id: string;
      name: string | null;
      slug: null;
      image: string | null;
      bio: string | null;
    } | null;
    views: number | null;
    description: string | null;
    category: string | null;
    image: string | null;
    pitch: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'startup' && defined(slug.current) && !defined($search) || title match $search || category match $search || author->name match $search ] | order(_createdAt desc){\n  title,\n  _id,\n  _createdAt,\n  pitch,\n  slug,\n  image,\n  category,\n  views,\n  author -> {\n    _id, name, image, bio\n  }, \n  description,  \n}": STARTUPS_QUERYResult;
    "*[_type == 'startup' && _id == $id][0] {\n  title,\n  _id,\n  _createdAt,\n  pitch,\n  slug,\n  image,\n  category,\n  views,\n  author -> {\n    _id, name, image, bio, username\n  }, \n  description,  \n  pitch,\n}": STARTUP_QUERY_BY_IDResult;
    "*[_type == 'startup' && _id == $id][0] { \n  _id,\n  views,\n}": STARTUP_VIEWS_QUERY_BY_IDResult;
    "*[_type == 'startup' && author._ref == $id] | order(_createdAt desc)  {  \n  title,\n  _id,\n  _createdAt,\n  pitch,\n  slug,\n  image,\n  category,\n  views,\n  author -> {\n    _id, name, image, bio\n  }, \n  description,  \n}": ALL_STARTUPS_QUERY_BY_IDResult;
    "*[_type == 'author' && id == $id][0] { \n  _id,\n  id,\n  name,\n  username,\n  email,\n  image,\n  bio,\n}": AUTHOR_QUERY_BY_GITHUB_IDResult;
    "*[_type == 'author' && _id == $id][0] { \n  _id,\n  id,\n  name,\n  username,\n  email,\n  image,\n  bio,\n}": AUTHOR_QUERY_BY_IDResult;
    "*[_type == \"playlist\" && slug.current == $slug][0] {\n    _id,\n    title,\n    slug,\n    select[]->{\n      _id,\n      _createdAt,\n      title,\n      slug,\n      author->{\n        _id,\n        name,\n        slug,\n        image,\n        bio\n      },\n      views,\n      description,\n      category,\n      image,\n      pitch\n    }\n  }": PLAYLIST_QUERY_BY_SLUGResult;
  }
}
